version: '3.8'

services:
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    restart: always
    ports:
      - "5433:5432" # Host port 5433 mapped to container 5432 (TimescaleDB)
    environment:
      POSTGRES_DB: fitbit_data
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d fitbit_data"]
      interval: 5s
      timeout: 5s
      retries: 5

  ingestion_app:
    build:
      context: . # Build context is the project root
      dockerfile: ingestion/Dockerfile # Dockerfile is in ingestion/
    restart: always
    depends_on:
      timescaledb:
        condition: service_healthy
    environment:
      DB_HOST: timescaledb
      DB_NAME: fitbit_data
      DB_USER: user
      DB_PASSWORD: password
      FITBIT_CLIENT_ID: "YOUR_FITBIT_CLIENT_ID" # REPLACE THIS
      FITBIT_CLIENT_SECRET: "YOUR_FITBIT_CLIENT_SECRET" # REPLACE THIS
    volumes:
      - ./:/app # Mount entire project root to /app (for data files, scripts, source code)

  backend_app:
    build:
      context: . # Build context is the project root
      dockerfile: backend/Dockerfile # Dockerfile is in backend/
    restart: always
    ports:
      - "8001:8000" # Host port 8000 mapped to container 8000 (Backend API)
    environment:
      DB_HOST: timescaledb
      DB_NAME: fitbit_data
      DB_USER: user
      DB_PASSWORD: password
    depends_on:
      timescaledb:
        condition: service_healthy
    volumes:
      - ./:/app # Mount the entire project root to /app

  frontend_app:
    build:
      context: ./frontend # Build context is the frontend folder
      dockerfile: Dockerfile # Dockerfile is in frontend/
    restart: always
    ports:
      - "8081:80" # Host port 8081 mapped to container 80 (Frontend Web App)
    depends_on:
      - backend_app # Ensure backend is ready before frontend calls it
    volumes:
      - ./frontend/:/usr/share/nginx/html # Mount the frontend code into Nginx's serving directory

  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000" # Grafana UI will be on http://localhost:3000
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - timescaledb
# Monitoring Stack

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/rules.yml:/etc/prometheus/rules.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: always
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: always
    ports:
      - "9100:9100"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: always
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8082:8080" # Mapped to 8082 to avoid conflict with the old frontend

volumes:
  timescaledb_data:
  grafana_data:
  prometheus_data: {}
  alertmanager_data: {} 
